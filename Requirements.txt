Requirements

Implement the network of dining cryptographers problem with 3 cryptographers in the GO Programming language. You must adhere to the following requirements: 

Every cryptographer is its own process.
Every coin is its own process
The restaurant owner is its own process
A table observer (yet another process) that sees the external events.

Deliverables:

•	Your code
•	Take the events that the table observer sees, and show that they satisfy the anonymity requirement.
•	Allow cryptographer 0 to see all 3 coins. Write a routine for him to determine who pays, and show that your code works by asking one cryptographer to pay.
Note:

1.	http://cpansearch.perl.org/src/SHEVEK/Crypt-Dining-1.01/lib/Crypt/Dining.pm has a Pearl implementation, but it does not answer the turn-in parts of 2 and 3.
2.	Dining Philosophers have been implemented in GO at http://f.souza.cc/2011/10/go-solution-for-dining-philosophers.html.
3.	The GO programming language has an excellent online tutorial at http://golang.org, and lots of references.

Simplifying Assumptions:

Actors: Cryptographers A, B, C; Cryptographer 0, Observer, Restaurant owner, Coins
•	The person to the right views the person on the lefts coin. B sees A’s coin, C sees B’s coin, and A sees C’s coin
•	Coins values are either true or false (0 or 1)
•	Outcomes are either same or different
•	Cryptographer 0 sees all the outcomes of A,B C’s assertion ( Same or different )
•	Observer will only see the outcomes (Same or different) but cannot see the coin result
•	Restaurant owner computes the outcome of all assertions to figure out who is paying
•	Cryptographer 0 sees all the coins after communication with the other cryptographers has occurred
